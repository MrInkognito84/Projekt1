#include "SFML/Graphics.hpp"
#include <vector>
#include <iostream>
#include <fstream>

class Game {
public:
    Game() : window(sf::VideoMode(800, 600), "SFML Arkanoid") {
        // Ładowanie czcionki
        if (!font.loadFromFile("C:/Windows/Fonts/times.ttf")) {
            std::cerr << "Error loading font!" << std::endl;
        }

        // Ładowanie  tła
        if (!backgroundTexture.loadFromFile("background.jpg")) {
            std::cerr << "Error loading background texture!" << std::endl;
        }
        background.setTexture(backgroundTexture);

        // menu
        initMenu();

        // Piłka
        ball.setRadius(10.0f);
        ball.setFillColor(sf::Color::White);
        ball.setPosition(400.0f, 300.0f);
        ballVelocity = sf::Vector2f(0.1f, 0.1f); // Prędkość piłki

        // Paletka
        paddle.setSize({ 100.0f, 20.0f });
        paddle.setFillColor(sf::Color::Blue);
        paddle.setPosition(350.0f, 550.0f);

        // Kafelki
        initBricks();

        // Stan gry
        gameState = MENU; // Początkowy stan to menu

        // Inicjalizacja punktacji
        score = 0;
        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(sf::Color::White);
        scoreText.setPosition(700, 10); // Prawy górny róg
        updateScoreText();

        // Ramka
        border.setSize({ 780, 580 });
        border.setFillColor(sf::Color::Transparent);
        border.setOutlineThickness(10);
        border.setOutlineColor(sf::Color::White);
        border.setPosition(10, 10);

        // Pauza
        paused = false;
        pauseText.setFont(font);
        pauseText.setString("Pauza");
        pauseText.setCharacterSize(50);
        pauseText.setFillColor(sf::Color::White);
        pauseText.setPosition(300, 250);

        //  poziom trudności
        currentDifficulty = EASY;
    }

    void run() {
        while (window.isOpen()) {
            processEvents();
            if (!paused && gameState == PLAYING) {
                update();
            }
            render();
        }
    }

private:
    sf::RenderWindow window;
    sf::CircleShape ball;
    sf::RectangleShape paddle;
    sf::Vector2f ballVelocity; // Prędkość piłki
    sf::Font font;
    sf::Text menuText[4]; // Opcje menu
    int selectedMenuIndex = 0;
    enum GameState { MENU, PLAYING, HELP, DIFFICULTY };
    GameState gameState;

    // Kafelki
    std::vector<sf::RectangleShape> bricks;

    // Punktacja
    int score;
    sf::Text scoreText;

    // Tło
    sf::Texture backgroundTexture;
    sf::Sprite background;

    // Ramka
    sf::RectangleShape border;

    // Pauza
    bool paused;
    sf::Text pauseText;

    // Poziomy trudności
    enum Difficulty { EASY, MEDIUM, HARD };
    Difficulty currentDifficulty;

    void initMenu() {
        menuText[0].setFont(font);
        menuText[0].setString("Start");
        menuText[0].setCharacterSize(30);
        menuText[0].setPosition(350, 200);

        menuText[1].setFont(font);
        menuText[1].setString("Pomoc");
        menuText[1].setCharacterSize(30);
        menuText[1].setPosition(350, 250);

        menuText[2].setFont(font);
        menuText[2].setString("Poziom trudności");
        menuText[2].setCharacterSize(30);
        menuText[2].setPosition(350, 300);

        menuText[3].setFont(font);
        menuText[3].setString("Wyjście");
        menuText[3].setCharacterSize(30);
        menuText[3].setPosition(350, 350);

        
        menuText[selectedMenuIndex].setFillColor(sf::Color::Red);
    }

    void initBricks() {
        const int brickWidth = 80;
        const int brickHeight = 30;
        const int brickPadding = 10;
        const int brickOffsetTop = 50;
        const int brickOffsetLeft = 50;

        for (int i = 0; i < 5; ++i) { // 5 rzędów
            for (int j = 0; j < 8; ++j) { // 8 kafelków w rzędzie
                sf::RectangleShape brick(sf::Vector2f(brickWidth, brickHeight));
                brick.setFillColor(sf::Color::Green);
                brick.setPosition(brickOffsetLeft + j * (brickWidth + brickPadding), brickOffsetTop + i * (brickHeight + brickPadding));
                bricks.push_back(brick);
            }
        }
    }

    void processEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            if (gameState == MENU) {
                // Nawigacja w menu
                if (event.type == sf::Event::KeyPressed) {
                    if (event.key.code == sf::Keyboard::Up) {
                        if (selectedMenuIndex > 0) {
                            menuText[selectedMenuIndex].setFillColor(sf::Color::White);
                            selectedMenuIndex--;
                            menuText[selectedMenuIndex].setFillColor(sf::Color::Red);
                        }
                    }
                    else if (event.key.code == sf::Keyboard::Down) {
                        if (selectedMenuIndex < 3) {
                            menuText[selectedMenuIndex].setFillColor(sf::Color::White);
                            selectedMenuIndex++;
                            menuText[selectedMenuIndex].setFillColor(sf::Color::Red);
                        }
                    }
                    else if (event.key.code == sf::Keyboard::Enter) {
                        if (selectedMenuIndex == 0) {
                            gameState = PLAYING; // Start gry
                        }
                        else if (selectedMenuIndex == 1) {
                            gameState = HELP; // Ekran pomocy
                        }
                        else if (selectedMenuIndex == 2) {
                            gameState = DIFFICULTY; // Wybór poziomu trudności
                        }
                        else if (selectedMenuIndex == 3) {
                            confirmExit(); // Potwierdzenie wyjścia
                        }
                    }
                }
            }
            else if (gameState == HELP) {
                // Powrót do menu 
                if (event.type == sf::Event::KeyPressed) {
                    gameState = MENU;
                }
            }
            else if (gameState == DIFFICULTY) {
                // Wybór poziomu trudności
                if (event.type == sf::Event::KeyPressed) {
                    if (event.key.code == sf::Keyboard::Num1) {
                        currentDifficulty = EASY;
                        applyDifficulty();
                        gameState = MENU;
                    }
                    else if (event.key.code == sf::Keyboard::Num2) {
                        currentDifficulty = MEDIUM;
                        applyDifficulty();
                        gameState = MENU;
                    }
                    else if (event.key.code == sf::Keyboard::Num3) {
                        currentDifficulty = HARD;
                        applyDifficulty();
                        gameState = MENU;
                    }
                }
            }
            else if (gameState == PLAYING) {
                // Pauzowanie gry
                if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::P) {
                    paused = !paused;
                }
                // Resetowanie gry
                if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::R) {
                    resetGame();
                }
                // Wyjście z gry
                if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Escape) {
                    confirmExit();
                }
            }
        }
    }

    void applyDifficulty() {
        switch (currentDifficulty) {
        case EASY:
            ballVelocity = sf::Vector2f(0.1f, 0.1f); 
            paddle.setSize({ 120.0f, 20.0f }); 
            break;
        case MEDIUM:
            ballVelocity = sf::Vector2f(0.2f, 0.2f); 
            paddle.setSize({ 100.0f, 20.0f }); 
            break;
        case HARD:
            ballVelocity = sf::Vector2f(0.3f, 0.3f); 
            paddle.setSize({ 80.0f, 20.0f }); 
            break;
        }
    }

    void update() {
        if (gameState == PLAYING) {
            // Poruszanie paletką
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) && paddle.getPosition().x > 0) {
                paddle.move(-0.2f, 0.0f);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) && paddle.getPosition().x + paddle.getSize().x < window.getSize().x) {
                paddle.move(0.2f, 0.0f);
            }

            // Poruszanie piłką
            ball.move(ballVelocity);

            // Odbicie od ścian
            if (ball.getPosition().x <= 0 || ball.getPosition().x + ball.getRadius() * 2 >= window.getSize().x) {
                ballVelocity.x = -ballVelocity.x;
            }
            if (ball.getPosition().y <= 0) {
                ballVelocity.y = -ballVelocity.y;
            }

            // Odbicie od paletki
            if (ball.getGlobalBounds().intersects(paddle.getGlobalBounds())) {
                ballVelocity.y = -ballVelocity.y;
            }

            // Kolizja piłki  kafelk
            for (auto it = bricks.begin(); it != bricks.end(); ) {
                if (ball.getGlobalBounds().intersects(it->getGlobalBounds())) {
                    ballVelocity.y = -ballVelocity.y; // Odbicie piłki
                    it = bricks.erase(it); // Usunięcie kafelka
                    score += 10; // Dodaj punkty 
                    updateScoreText();
                }
                else {
                    ++it;
                }
            }

            
            if (ball.getPosition().y + ball.getRadius() * 2 >= window.getSize().y) {
                ball.setPosition(400.0f, 300.0f);
            }
        }
    }

    void updateScoreText() {
        scoreText.setString("Wynik: " + std::to_string(score));
    }

    void render() {
        window.clear();

        //  tła
        window.draw(background);

        //  ramki
        window.draw(border);

        if (gameState == MENU) {
            // menu
            for (int i = 0; i < 4; i++) {
                window.draw(menuText[i]);
            }
        }
        else if (gameState == PLAYING) {
            // gry
            window.draw(ball);
            window.draw(paddle);

            //  kafelków
            for (const auto& brick : bricks) {
                window.draw(brick);
            }

            //  punktacji
            window.draw(scoreText);

            
            if (paused) {
                window.draw(pauseText);
            }
        }
        else if (gameState == HELP) {
            //  pomocy
            sf::Text helpText;
            helpText.setFont(font);
            helpText.setString(
                "Ekran pomocy:\n"
                "Użyj strzałek w LEWO i PRAWO, aby poruszać paletką.\n"
                "Naciśnij ESC, aby wrócić do menu.\n"
                "Naciśnij P, aby wstrzymać grę.\n"
                "Naciśnij R, aby zresetować grę."
            );
            helpText.setCharacterSize(24);
            helpText.setPosition(100, 200);
            window.draw(helpText);
        }
        else if (gameState == DIFFICULTY) {
            
            sf::Text difficultyText;
            difficultyText.setFont(font);
            difficultyText.setString(
                "Wybierz poziom trudności:\n"
                "1 - Łatwy\n"
                "2 - Średni\n"
                "3 - Trudny"
            );
            difficultyText.setCharacterSize(24);
            difficultyText.setPosition(100, 200);
            window.draw(difficultyText);
        }

        window.display();
    }

    void resetGame() {
        // Resetowanie pozycj
        ball.setPosition(400.0f, 300.0f);
        paddle.setPosition(350.0f, 550.0f);

        //kafelków
        bricks.clear();
        initBricks();

        // punktacji
        score = 0;
        updateScoreText();
    }

    void confirmExit() {
        sf::Text exitText;
        exitText.setFont(font);
        exitText.setString("Czy na pewno chcesz wyjść? (Y/N)");
        exitText.setCharacterSize(30);
        exitText.setFillColor(sf::Color::White);
        exitText.setPosition(200, 250);

        window.draw(exitText);
        window.display();

        sf::Event event;
        while (window.waitEvent(event)) {
            if (event.type == sf::Event::KeyPressed) {
                if (event.key.code == sf::Keyboard::Y) {
                    window.close();
                }
                else if (event.key.code == sf::Keyboard::N) {
                    break;
                }
            }
        }
    }
};

int main() {
    Game game;
    game.run();
    return 0;
}
